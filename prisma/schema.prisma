datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  code          String?   @unique
  prefix        String?
  username      String?   @unique
  firstname     String?
  lastname      String?
  status        String?
  school        String?
  classlvl      String?
  purpose       String[]
  platform      String[]
  staff         Staff?
  event         Event[]
  isStaff       Boolean   @default(false)
  isTUCMC       Boolean   @default(false)
  isRegister    Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

type Event {
  day String
  join Boolean
  dayTime String
  gate String
}

type Staff {
  organization String?
  tag String?
  gate String?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
